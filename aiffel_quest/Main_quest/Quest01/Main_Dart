import 'package:flutter/material.dart'; 
import 'package:audioplayers/audioplayers.dart'; // audioplayers 패키지에서 audioplayers.dart 라이브러리를 호출

void main() {
  runApp(const PianoApp()); 
}

class PianoApp extends StatelessWidget { // PianoApp 클래스를 정의하며 이 클래스는 StatelessWidget을 상속받음
  const PianoApp({Key? key}) : super(key: key);
  static AudioCache player = AudioCache(prefix: 'notes/'); // 오디오 파일을 재생하기 위한 AudioCache 객체를 생성

  void playAudio(String fileName) { // 오디오 파일을 재생하는 함수를 정의
    player.play(fileName); // AudioCache 객체의 play 메서드를 사용하여 오디오를 재생
  }

  @override
  Widget build(BuildContext context) { // UI를 구성하는 build 메서드를 정의
    return MaterialApp( // MaterialApp 
      debugShowCheckedModeBanner: false, 
      home: Scaffold( // Scaffold 위젯을 home으로 설정
        body: SafeArea( // SafeArea 위젯을 사용하여 화면의 안전한 영역 내에 내용을 배치
          child: Column( // Column 위젯을 사용하여 자식 위젯들을 세로로 배열
            children: [ // 
              PianoButton( // PianoButton 위젯을 생성
                label: 'B3', // 라벨을 'B3'으로 설정
                onSecondWhitePress: () { // 흰색 키를 눌렀을 때의 동작을 정의
                  playAudio('b3.mp3'); // 'b3.mp3' 오디오 파일을 재생
                },
              ),
              PianoButtonSuperKey( // PianoButtonSuperKey 
                whiteLabel: 'C4', // 흰색 키의 라벨을 'C4'로 설정
                blackLabel: 'C#4', // 검은색 키의 라벨을 'C#4'로 설정
                onBlackPress: () { // 검은색 키를 눌렀을 때의 동작을 정의
                  playAudio('c#4.mp3'); // 'c#4.mp3' 오디오 파일을 재생
                },
                onWhitePress: () { // 흰색 키를 눌렀을 때의 동작을 정의
                  playAudio('c4.mp3'); // 'c4.mp3' 오디오 파일을 재생
                },
              ),
              // 이하 코드는 위와 동일한 패턴으로 피아노 키를 생성
              PianoButtonSuperKey(
                whiteLabel: 'D4',
                blackLabel: 'D#4',
                onBlackPress: () {
                  playAudio('d#4.mp3');
                },
                onWhitePress: () {
                  playAudio('d4.mp3');
                },
              ),
              PianoButton(
                label: 'E4',
                onSecondWhitePress: () {
                  playAudio('e4.mp3');
                },
              ),
              PianoButtonSuperKey(
                whiteLabel: 'F4',
                blackLabel: 'F#4',
                onBlackPress: () {
                  playAudio('f#4.mp3');
                },
                onWhitePress: () {
                  playAudio('f4.mp3');
                },
              ),
              PianoButtonSuperKey(
                whiteLabel: 'G4',
                blackLabel: 'G#4',
                onBlackPress: () {
                  playAudio('g#4.mp3');
                },
                onWhitePress: () {
                  playAudio('g4.mp3');
                },
              ),
              PianoButton(
                label: 'A4',
                onSecondWhitePress: () {
                  playAudio('a4.mp3');
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// PianoButtonSuperKey 클래스를 정의하며 이 클래스는 StatelessWidget을 상속받음
// 이 클래스는 흰색 키와 검은색 키를 동시에 표현하는 피아노 키 위젯
class PianoButtonSuperKey extends StatelessWidget {
  final VoidCallback onWhitePress; // 흰색 키를 눌렀을 때의 동작을 정의하는 콜백
  final VoidCallback onBlackPress; // 검은색 키를 눌렀을 때의 동작을 정의하는 콜백
  final String whiteLabel; // 흰색 키의 라벨
  final String blackLabel; // 검은색 키의 라벨

  PianoButtonSuperKey({
    Key? key,
    required this.onWhitePress,
    required this.onBlackPress,
    required this.whiteLabel,
    required this.blackLabel,
  }) : super(key: key);

  final ButtonStyle whiteButtonStyle = ElevatedButton.styleFrom(
    backgroundColor: Colors.white60, // 흰색 키의 배경색을 설정
    side: BorderSide.none,
    shape: const RoundedRectangleBorder(
      borderRadius: BorderRadius.zero,
    ),
  );

  final ButtonStyle blackButtonStyle = ElevatedButton.styleFrom(
    backgroundColor: Colors.black, // 검은색 키의 배경색을 설정
  );

  @override
  Widget build(BuildContext context) { // UI를 구성하는 build 메서드를 정의
    return Expanded(
      child: Stack( // Stack 위젯을 사용하여 자식 위젯들을 겹치게 배치
        clipBehavior: Clip.none,
        children: [
          Padding(
            padding: const EdgeInsets.all(0.0),
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(),
              ),
              height: double.infinity,
              width: double.infinity,
              child: ElevatedButton(
                style: whiteButtonStyle,
                onPressed: onWhitePress,
                child: Text(whiteLabel), // 흰색 키의 라벨을 표시
              ),
            ),
          ),
          Positioned(
            top: -25.0,
            child: Container(
              height: 75.0,
              width: 250.0,
              child: ElevatedButton(
                style: blackButtonStyle,
                onPressed: onBlackPress,
                child: Text(blackLabel,
                    style: TextStyle(color: Colors.white)), // 검은색 키의 라벨을 표시
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// PianoButton 클래스를 정의하며 이 클래스는 StatelessWidget을 상속
// 이 클래스는 흰색 키만 표현하는 피아노 키 위젯
class PianoButton extends StatelessWidget {
  final VoidCallback onSecondWhitePress; // 흰색 키를 눌렀을 때의 동작을 정의하는 콜백
  final String label; // 흰색 키의 라벨

  PianoButton({
    Key? key,
    required this.onSecondWhitePress,
    required this.label,
  }) : super(key: key);

  final ButtonStyle style2 = ElevatedButton.styleFrom(
    backgroundColor: Colors.white60, // 흰색 키의 배경색을 설정
    side: BorderSide.none,
    shape: const RoundedRectangleBorder(
      borderRadius: BorderRadius.zero,
    ),
  );

  @override
  Widget build(BuildContext context) { // UI를 구성하는 build 메서드를 정의
    return Expanded(
      flex: 1,
      child: Padding(
        padding: const EdgeInsets.all(0.0),
        child: Container(
          decoration: BoxDecoration(
            border: Border.all(),
          ),
          height: double.infinity,
          width: double.infinity,
          child: ElevatedButton(
            style: style2,
            onPressed: onSecondWhitePress,
            child: Text(label), 
          ),
        ),
      ),
    );
  }
}
